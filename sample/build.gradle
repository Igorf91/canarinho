apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        applicationId "br.com.concrete.canarinho.sample"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {

        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
        }
    }
}

def supportLibsVersion = '28.0.0'

dependencies {

    implementation project(':canarinho')

    implementation "com.android.support:appcompat-v7:$supportLibsVersion"
    implementation "com.android.support:cardview-v7:$supportLibsVersion"
    implementation "com.android.support:design:$supportLibsVersion"

    androidTestUtil 'com.android.support.test:orchestrator:1.0.1'

    androidTestImplementation("com.android.support:support-annotations:$supportLibsVersion")
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1')
    androidTestImplementation('com.android.support.test:runner:1.0.1')

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.robolectric:robolectric:3.7.1'
}

jacoco {
    toolVersion = "0.7.4+"
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'

    reports {
        xml.enabled true
        html.enabled true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}
